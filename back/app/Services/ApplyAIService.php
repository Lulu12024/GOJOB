<?php

namespace App\Services;

use App\Http\Controllers\API\ApplicationController;
use App\Models\ApplyAiSetting;
use App\Models\Job;
use App\Models\User;
use Illuminate\Http\Request;

class ApplyAIService
{
    /**
     * Get job suggestions based on user settings
     *
     * @param int $userId
     * @return array
     */
    public function getJobSuggestions(int $userId): array
    {
        $user = User::findOrFail($userId);
        $settings = $user->applyAiSettings;
        
        if (!$settings) {
            return [];
        }
        
        // Build job query based on user preferences
        $query = Job::where('status', 'active')
                   ->whereIn('category', $settings->categories);
        
        // Apply salary filter if specified
        if ($settings->salary_min) {
            $query->where('salary_amount', '>=', $settings->salary_min);
        }
        
        if ($settings->salary_max) {
            $query->where('salary_amount', '<=', $settings->salary_max);
        }
        
        // Exclude specific companies if specified
        if ($settings->excluded_companies && count($settings->excluded_companies) > 0) {
            $query->whereNotIn('employer_id', function ($q) use ($settings) {
                $q->select('id')
                  ->from('users')
                  ->whereIn('name', $settings->excluded_companies);
            });
        }
        
        // Apply additional filters if specified
        if ($settings->filters && count($settings->filters) > 0) {
            foreach ($settings->filters as $filter) {
                if (in_array($filter, ['accommodation', 'company_car'])) {
                    $columnName = $filter === 'accommodation' ? 'has_accommodation' : 'has_company_car';
                    $query->where($columnName, true);
                } elseif (in_array($filter, ['accepts_working_visa', 'accepts_holiday_visa', 'accepts_student_visa'])) {
                    $query->where($filter, true);
                }
            }
        }
        
        // Get recent jobs, sorted by most recent
        $jobs = $query->orderBy('created_at', 'desc')
                     ->with('employer')
                     ->limit(10)
                     ->get();
        
        return $jobs->toArray();
    }
    
    /**
     * Apply to a job using AI
     *
     * @param int $userId
     * @param int $jobId
     * @return array
     */
    public function applyToJob(int $userId, int $jobId): array
    {
        $user = User::findOrFail($userId);
        $job = Job::findOrFail($jobId);
        
        // Check if the job accepts applications
        if ($job->status !== 'active') {
            return [
                'success' => false,
                'error' => 'This job is not accepting applications',
            ];
        }
        
        try {
            // Create application request
            $applicationRequest = new Request([
                'job_id' => $job->id,
                // AI would automatically fill in custom answers based on user profile and job description
                'custom_answers' => [
                    'experience' => $user->bio,
                    'motivation' => 'Automatically generated by ApplyAI based on my profile.',
                ],
            ]);
            
            // Create application controller instance
            $applicationController = app(ApplicationController::class);
            
            // Use the application controller to create the application
            $response = $applicationController->store($applicationRequest);
            $responseData = json_decode($response->getContent(), true);
            
            if ($response->getStatusCode() !== 201) {
                return [
                    'success' => false,
                    'error' => $responseData['message'] ?? 'Failed to create application',
                ];
            }
            
            return [
                'success' => true,
                'application' => $responseData['application'],
            ];
        } catch (\Exception $e) {
            return [
                'success' => false,
                'error' => $e->getMessage(),
            ];
        }
    }
}