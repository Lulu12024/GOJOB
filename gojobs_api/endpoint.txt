Guide d'utilisation des URLs de l'API Django
Voici un guide complet pour utiliser les diff√©rentes routes de votre API Django. Pour chaque route, je d√©cris son URL, sa m√©thode HTTP, les param√®tres n√©cessaires et une explication de son usage.
üîê Authentification
Inscription (Register)
URL: /api/auth/register/
M√©thode: POST
Param√®tres:
  - email: adresse email (obligatoire)
  - password: mot de passe (obligatoire)
  - first_name: pr√©nom (obligatoire)
  - last_name: nom (obligatoire)
  - role: r√¥le de l'utilisateur ('employer', 'candidate' ou 'admin') (obligatoire)
Cr√©e un nouvel utilisateur et retourne un token d'authentification.
Connexion (Login)
URL: /api/auth/login/
M√©thode: POST
Param√®tres:
  - email: adresse email (obligatoire)
  - password: mot de passe (obligatoire)
Authentifie un utilisateur et retourne un token d'acc√®s et un token de rafra√Æchissement.
D√©connexion (Logout)
URL: /api/auth/logout/
M√©thode: POST
Param√®tres:
  - refresh: token de rafra√Æchissement (obligatoire)
Headers:
  - Authorization: Bearer {access_token}
D√©connecte l'utilisateur en invalidant son token de rafra√Æchissement.
Rafra√Æchir Token (Refresh Token)
URL: /api/auth/refresh/
M√©thode: POST
Param√®tres:
  - refresh: token de rafra√Æchissement (obligatoire)
G√©n√®re un nouveau token d'acc√®s √† partir du token de rafra√Æchissement.
üë§ Utilisateurs (Users)
Profil utilisateur
URL: /api/users/profile/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les informations du profil de l'utilisateur connect√©.
Mise √† jour du profil
URL: /api/users/profile/
M√©thode: PUT
Headers:
  - Authorization: Bearer {access_token}
Param√®tres: (tous optionnels)
  - first_name: pr√©nom
  - last_name: nom
  - phone: t√©l√©phone
  - profile_image: image de profil (fichier)
  - bio: biographie
Met √† jour les informations de base du profil utilisateur.
Mise √† jour des d√©tails du profil
URL: /api/users/profile/details/
M√©thode: PUT
Headers:
  - Authorization: Bearer {access_token}
Param√®tres: (selon le type d'utilisateur)
  Candidat:
    - address: adresse
    - city: ville
    - is_handicapped: situation de handicap (boolean)
    - has_driving_license: possession permis de conduire (boolean)
    - has_vehicle: possession v√©hicule (boolean)
    - skills: comp√©tences (JSON)
    - experience: exp√©rience (JSON)
    - education: formation (JSON)
    - languages: langues (JSON)
    - job_preferences: pr√©f√©rences d'emploi (JSON)
  Employeur:
    - company_name: nom de l'entreprise
    - company_description: description de l'entreprise
    - company_website: site web de l'entreprise
    - company_size: taille de l'entreprise
    - company_industry: secteur d'activit√©
Met √† jour les d√©tails sp√©cifiques du profil selon le r√¥le de l'utilisateur.
üíº Offres d'emploi (Jobs)
Liste des offres d'emploi
URL: /api/jobs/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
Param√®tres optionnels (query string):
  - ordering: champ pour le tri (ex: -created_at, salary_amount)
  - search: recherche textuelle
  - status: filtre par statut
  - category: filtre par cat√©gorie
R√©cup√®re la liste des offres d'emploi avec possibilit√© de filtrage.
Cr√©er une offre d'emploi (employeur uniquement)
URL: /api/jobs/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - title: titre de l'offre (obligatoire)
  - description: description d√©taill√©e (obligatoire)
  - category: cat√©gorie (obligatoire)
  - subcategory: sous-cat√©gorie (optionnel)
  - city: ville (obligatoire)
  - address: adresse (optionnel)
  - salary_type: type de salaire ('hourly' ou 'monthly') (obligatoire)
  - salary_amount: montant du salaire (obligatoire)
  - contract_type: type de contrat (obligatoire)
  - is_entry_level: poste d√©butant (boolean)
  - experience_years_required: ann√©es d'exp√©rience requises
  - requires_driving_license: permis de conduire requis (boolean)
  Et autres champs selon le mod√®le Job
Cr√©e une nouvelle offre d'emploi. L'employeur est automatiquement associ√© √† l'offre.
D√©tails d'une offre d'emploi
URL: /api/jobs/{id}/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les d√©tails d'une offre d'emploi sp√©cifique.
Modifier une offre d'emploi (employeur uniquement)
URL: /api/jobs/{id}/
M√©thode: PUT (ou PATCH pour modification partielle)
Headers:
  - Authorization: Bearer {access_token}
Param√®tres: (m√™mes que pour la cr√©ation, tous optionnels)
Met √† jour une offre d'emploi existante.
Supprimer une offre d'emploi (employeur uniquement)
URL: /api/jobs/{id}/
M√©thode: DELETE
Headers:
  - Authorization: Bearer {access_token}
Supprime une offre d'emploi.
Offres recommand√©es (candidat uniquement)
URL: /api/jobs/recommended/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les offres d'emploi recommand√©es pour le candidat en fonction de son profil.
Recherche d'offres d'emploi
URL: /api/jobs/search/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
Param√®tres (query string):
  - q: terme de recherche
  - category: filtre par cat√©gorie
  - city: filtre par ville
  - contract_type: filtre par type de contrat
Recherche des offres d'emploi avec des filtres sp√©cifiques.
üìù Candidatures (Applications)
Liste des candidatures
URL: /api/applications/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
Pour les candidats: liste de leurs candidatures
Pour les employeurs: liste des candidatures re√ßues pour leurs offres
Cr√©er une candidature (candidat uniquement)
URL: /api/applications/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - job_id: ID de l'offre d'emploi (obligatoire)
  - cv_url: CV (fichier, optionnel)
  - motivation_letter_url: lettre de motivation (fichier, optionnel)
  - custom_answers: r√©ponses personnalis√©es (JSON, optionnel)
Soumet une candidature pour une offre d'emploi.
D√©tails d'une candidature
URL: /api/applications/{id}/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les d√©tails d'une candidature sp√©cifique.
Modifier le statut d'une candidature (employeur uniquement)
URL: /api/applications/{id}/status/
M√©thode: PUT
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - status: nouveau statut ('pending', 'accepted', 'rejected', 'on_hold') (obligatoire)
Met √† jour le statut d'une candidature.
Supprimer une candidature
URL: /api/applications/{id}/
M√©thode: DELETE
Headers:
  - Authorization: Bearer {access_token}
Supprime une candidature.
üí¨ Messages
Liste des messages
URL: /api/messages/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re tous les messages envoy√©s et re√ßus par l'utilisateur.
Envoyer un message
URL: /api/messages/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - receiver_id: ID du destinataire (obligatoire)
  - content: contenu du message (obligatoire)
  - job_id: ID de l'offre d'emploi associ√©e (optionnel)
Envoie un message √† un autre utilisateur.
Conversations
URL: /api/messages/conversations/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re la liste des conversations de l'utilisateur avec le dernier message pour chacune.
D√©tails d'un message
URL: /api/messages/{id}/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les d√©tails d'un message sp√©cifique.
üí∞ Abonnements (Subscriptions)
Liste des abonnements
URL: /api/subscriptions/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re l'abonnement actuel de l'utilisateur.
Cr√©er un abonnement
URL: /api/subscriptions/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - plan_type: type d'abonnement ('basic_pro', 'standard_pro', 'premium_pro', 'apply_ai', 'apply_ai_pro') (obligatoire)
  - amount: montant (obligatoire)
  - billing_cycle: cycle de facturation ('weekly', 'monthly') (obligatoire)
  - auto_renew: renouvellement automatique (boolean)
Cr√©e un nouvel abonnement pour l'utilisateur.
D√©tails d'un abonnement
URL: /api/subscriptions/{id}/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les d√©tails d'un abonnement sp√©cifique.
Modifier un abonnement
URL: /api/subscriptions/{id}/
M√©thode: PUT
Headers:
  - Authorization: Bearer {access_token}
Param√®tres: (tous optionnels)
  - plan_type: type d'abonnement
  - billing_cycle: cycle de facturation
  - auto_renew: renouvellement automatique
Met √† jour les informations d'un abonnement.
Supprimer un abonnement
URL: /api/subscriptions/{id}/
M√©thode: DELETE
Headers:
  - Authorization: Bearer {access_token}
Supprime un abonnement (annulation).
üí∏ Paiements (Payments)
Traiter un paiement
URL: /api/payments/process/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - amount: montant (obligatoire)
  - payment_method: m√©thode de paiement (obligatoire)
  - subscription_id: ID de l'abonnement associ√© (optionnel)
Traite un nouveau paiement.
Historique des paiements
URL: /api/payments/history/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re l'historique des paiements de l'utilisateur.
‚ö° Emplois flash (Flash Jobs)
Liste des emplois flash
URL: /api/flash-jobs/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re la liste des emplois flash disponibles.
Cr√©er un emploi flash (employeur uniquement)
URL: /api/flash-jobs/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - job_id: ID de l'offre d'emploi associ√©e (obligatoire)
  - start_time: date et heure de d√©but (obligatoire)
  - confirmation_required: confirmation requise (boolean)
Cr√©e un nouvel emploi flash li√© √† une offre existante.
D√©tails d'un emploi flash
URL: /api/flash-jobs/{id}/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les d√©tails d'un emploi flash sp√©cifique.
Postuler √† un emploi flash (candidat uniquement)
URL: /api/flash-jobs/{id}/apply/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - cv_url: CV (fichier, optionnel)
  - motivation_letter_url: lettre de motivation (fichier, optionnel)
  - custom_answers: r√©ponses personnalis√©es (JSON, optionnel)
Soumet une candidature pour un emploi flash.
‚≠ê Favoris (Favorites)
Liste des favoris
URL: /api/favorites/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re la liste des offres d'emploi favorites de l'utilisateur.
Ajouter/Retirer un favori
URL: /api/favorites/toggle/{job_id}/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Ajoute l'offre aux favoris si elle n'y est pas, ou la retire si elle y est d√©j√†.
üîî Notifications
Liste des notifications
URL: /api/notifications/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re la liste des notifications de l'utilisateur.
Marquer une notification comme lue
URL: /api/notifications/{id}/read/
M√©thode: PUT
Headers:
  - Authorization: Bearer {access_token}
Marque une notification sp√©cifique comme lue.
Marquer toutes les notifications comme lues
URL: /api/notifications/read-all/
M√©thode: PUT
Headers:
  - Authorization: Bearer {access_token}
Marque toutes les notifications de l'utilisateur comme lues.
üìä Statistiques (Statistics)
Statistiques d'une offre d'emploi (employeur uniquement)
URL: /api/statistics/job/{job_id}/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les statistiques d'une offre d'emploi sp√©cifique.
Tableau de bord des statistiques (employeur uniquement)
URL: /api/statistics/dashboard/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les statistiques globales pour le tableau de bord de l'employeur.
üìë Contrats (Contracts)
Liste des contrats
URL: /api/contracts/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re la liste des contrats de l'utilisateur.
Cr√©er un contrat (employeur uniquement)
URL: /api/contracts/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - job_id: ID de l'offre d'emploi (obligatoire)
  - candidate_id: ID du candidat (obligatoire)
  - template_url: mod√®le de contrat (fichier, obligatoire)
  - start_date: date de d√©but (optionnel)
  - end_date: date de fin (optionnel)
  - bank_details: informations bancaires (JSON, optionnel)
Cr√©e un nouveau contrat.
D√©tails d'un contrat
URL: /api/contracts/{id}/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les d√©tails d'un contrat sp√©cifique.
Signer un contrat (candidat uniquement)
URL: /api/contracts/{id}/sign/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - signed_url: contrat sign√© (fichier, optionnel)
Signe un contrat en tant que candidat.
ü§ñ ApplyAI
Param√®tres ApplyAI (candidat uniquement)
URL: /api/apply-ai/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les param√®tres ApplyAI de l'utilisateur.
Cr√©er/Mettre √† jour les param√®tres ApplyAI (candidat uniquement)
URL: /api/apply-ai/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Param√®tres:
  - categories: cat√©gories d'int√©r√™t (liste)
  - salary_min: salaire minimum (optionnel)
  - salary_max: salaire maximum (optionnel)
  - excluded_companies: entreprises √† exclure (liste, optionnel)
  - filters: filtres suppl√©mentaires (JSON, optionnel)
  - notification_time: heure de notification (obligatoire)
Cr√©e ou met √† jour les param√®tres ApplyAI pour l'utilisateur.
Suggestions d'emplois ApplyAI (candidat uniquement)
URL: /api/apply-ai/suggestions/
M√©thode: GET
Headers:
  - Authorization: Bearer {access_token}
R√©cup√®re les suggestions d'emplois bas√©es sur les param√®tres ApplyAI de l'utilisateur.
Postuler automatiquement via ApplyAI (candidat uniquement)
URL: /api/apply-ai/apply/{job_id}/
M√©thode: POST
Headers:
  - Authorization: Bearer {access_token}
Postuler automatiquement √† une offre d'emploi via ApplyAI.
Notes importantes

Toutes les URL commencent par la base de votre API Django (ex: http://localhost:8000/api/)
Le token d'acc√®s (access_token) doit √™tre inclus dans l'en-t√™te Authorization pour toutes les routes authentifi√©es
Pour les op√©rations de cr√©ation/modification impliquant des fichiers, utilisez multipart/form-data comme type de contenu
Les routes avec des restrictions de r√¥le renverront une erreur 403 si l'utilisateur n'a pas le r√¥le requis
Les ID dans les URL doivent √™tre remplac√©s par l'identifiant r√©el de la ressource (ex: /api/jobs/42/)

Ce guide devrait vous aider √† int√©grer correctement l'API Django dans votre application frontend.